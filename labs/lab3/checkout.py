from datetime import date, datetime
"""
Test cases:
No negative price
Multiple discounts combination
"""
subtotal = 0
tax_total = 0
total = 0

# Receipt header
receipt_date = date.today().strftime("%B %d, %Y")
receipt_time = datetime.now().strftime("%H:%M")
receipt = f"\n110 Library Receipt\nDate: {receipt_date}\nTime: {receipt_time}\n"

books = int(input("Enter the number of unique book titles: "))
receipt += f"Number of unique book titles: {books}\n\n"
receipt += f"{'Quantity':<10}{'Title':<30}{'ISBN':<20}{'Price':<10}\n"

for i in range(books):
    book_title = input(f"\nBook title #{i+1}: ")
    book_price = float(input(f"Book ({book_title}) sticker price: "))
    book_quantity = int(input(f"Book ({book_title}) quantity: "))
    book_year = int(input(f"Book ({book_title}) publication year: "))
    book_isbn = input(f"Book ({book_title}) ISBN: ")

    book_price *= book_quantity

    # Calculate the discount according to the publication year
    if book_year <= 1986:
        book_price = 0
    elif 1990 <= book_year <= 2000:
        book_price *= 0.75
    elif book_year == 2021:
        book_price *= 1.05

    # Calculate the discount according the palindromic ISBN
    if book_isbn == book_isbn[::-1]:
        book_price -= 10 * book_quantity

    # In case the price is negative, normalize the price to zero
    book_price = max(0, book_price)

    # Calculate the accumulated subtotal without tax
    subtotal += book_price

    # Calculate the accumulated tax amount
    tax_total += book_price * 0.0825

    # Calculate the accumulated total with tax
    total += book_price * 1.0825

    # Add line item to receipt
    receipt += f"{book_quantity:<10}{book_title:<30}{book_isbn:<20}{'$'+str(round(book_price,2)):<10}\n"

# Receipt footer
receipt += f"\n{'Subtotal':<60}{'$'+str(round(subtotal,2)):<10}\n"
receipt += f"{'Tax':<60}{'$'+str(round(tax_total,2)):<10}\n"
receipt += f"{'Total':<60}{'$'+str(round(total,2)):<10}\n"
receipt += f"Generated by Library Management App"

print(f"{receipt}")
